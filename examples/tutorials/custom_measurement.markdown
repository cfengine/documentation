---
layout: default
title: Measuring custom metrics (Enterprise Only) 
sorting: 16
categories: [Examples, Tutorials]
published: true
alias: examples-tutorials-custom_measurement.html
tags: [Examples, Tutorials, Monitoring, Measurements, Enterprise]
---
**Note:** This tutorial is for Enterprise users who have access to the Mission
Portal application. CFEngine must be up and running in order to complete this
tutorial. 

## Overview 
In this tutorial we will add a custom measurement to monitor cf-serverd Virtual
Memory Size and Resident set size across all hosts.

CFEngine records performance metrics with `cf-monitord` for [many data points
by default][mon]. CFEngine Enterprise allows you to define custom `measurment`
promises to track any metric that can be collected from a file or a command.

This tutorial provides instructions for the following:

* Define a new measurement promise

* Access measurements from policy

* Ensure measurements are collected and graphed in Mission Portal

## Define a new measurement promise
Measurement promises are defined in monitor bundles. Let's create a new monitor bundle to watch cfengine components in `services/measurments.cf`.

// TODO: Consider switching this to an external file that is included
```cf3
bundle monitor cfengine_components
# @brief Measure interesting metrics about cfengine components
{
  vars:

#@ Different platforms have differnt ps output, and therefore require
#@ different regular expressions to match process info. If you are measuring a
#@ process from a different platform reference the process output format used
#@ in `/var/cfengine/state/cf_procs`.

    linux::
      "regex_vsz" string => "root\s+[0-9]+\s+[0-9]+\s+[0-9]+\s+[0-9.]+\s+[0-9.]+\s+([0-9]+).*";
      "regex_rss" string => "root\s+[0-9]+\s+[0-9]+\s+[0-9]+\s+[0-9.]+\s+[0-9.]+\s+[0-9]+\s+[0-20-]+\s+([0-9]+).*";

  measurements:
    "/var/cfengine/state/cf_procs"
      handle => "cf_serverd_vsz",
      comment => "Tracking the memory consumption of a process can help us identify possible memory leaks",
      stream_type => "file",
      data_type => "int",
      history_type => "weekly",
      units => "kB",
      match_value => line_match_value(".*cf-serverd.*",
                                "$(regex_vsz)");

    "/var/cfengine/state/cf_procs"
      handle => "cf_serverd_rss",
      comment => "Tracking the memory consumption of a process can help us identify possible memory leaks",
      stream_type => "file",
      data_type => "int",
      history_type => "weekly",
      units => "kB",
      match_value => line_match_value(".*cf-serverd.*",
                                "$(regex_rss)");

}
```

// explinations of cf_serverd_vsz (the first promise in the measurements section)
# `/var/cfengine/state/cf_procs` is a cached state of the process discoved on
# the host. Using this cache avoids unnecessary resampling.
# handle - uniquely identifying handle, will be used to identify the measurement from mon.* variables. 
# stream_type defines the source of the data as a file (as opposed to pipe for an executed commands output).
# data_type defines the type of value being collected. In this case we are collecting an integer.
# history_type defines how the data can be seen over a time series.
# units is an arbitrary string that describes the values units. It is used to
# to label visualizations and as general documentation of the value.
# match_value defines the details for selecting the the specific value to be
# measured from the source. In this example we are using the `match_value` body
# `line_match_value` from the standard library to extract the virtual memory
# size of the cf-serverd process.  


After defining the policy for your custom measurements they need to be added to
`inputs` in `body common control` of `promises.cf`. `cf-monitord` will
automatically start collecting the defined metrics. You can use the the verbose
output of cf-monitord to verify that the appropriate values are being colleted. 

Example cf-monitord output generated by executing `cf-monitord --no-fork -v | grep cf_serverd_vsz`:

```
2013-10-28T18:00:38+0000  verbose: Considering promise "cf_serverd_vsz"
2013-10-28T18:00:38+0000  verbose: Promise "cf_serverd_vsz" is numerical in nature
2013-10-28T18:00:38+0000     info: Sampling => root     20854 20847 20835  0.0  0.0  15280   0  1140    1 18:00 00:00:00 /bin/ps -eo user,pid,ppid,pgid,pcpu,pmem,vsz,ni,rss,nlwp,stime,time,args
2013-10-28T18:00:38+0000  verbose: Using slot ob_spare+9 (81) for cf_serverd_vsz
2013-10-28T18:00:38+0000  verbose:  ?? Look for cf_serverd_vsz regex .*cf-serverd.*
2013-10-28T18:00:38+0000     info: Extracted value "315108.000000" for promise "cf_serverd_vsz"
2013-10-28T18:00:38+0000  verbose: Setting Nova slot 81=cf_serverd_vsz to 315108.000000
2013-10-28T18:00:38+0000     info: Sampling => root     20854 20847 20835  0.0  0.0  15280   0  1140    1 18:00 00:00:00 /bin/ps -eo user,pid,ppid,pgid,pcpu,pmem,vsz,ni,rss,nlwp,stime,time,args
2013-10-28T18:00:38+0000  verbose: [81] cf_serverd_vsz q=315108.000000, var=69505136164.800003, ex=220575.600000
2013-10-28T18:00:38+0000  verbose: Storing 315108.00 in cf_serverd_vsz
```

[Back to top of page.][Measuring custom metrics (Enterprise Only)#Overview]

## Access measurements from policy
Values collected by `cf-monitord` are directly accessible from policy. These
values can be useful for automatic decision making. Let's add a simple bundle
that shows accessing these values, and uses them to make a decision.


Add `bundle agent report_mon_cfengine_components` to the previously created `services/measurements.cf` policy file.

// TODO: Consider switching this to an external file that is included see custom_measurement_policy.cf and documentation about including external files
```cf3
bundle agent report_mon_cfengine_components
# @brief Report on measured values for cfengine components
{
  classes:
    "cf_serverd_vsz_threshold_crossed" expression => isgreaterthan("$(mon.value_cf_serverd_vsz)", "0");

  reports:
    "Last mon.cf_serverd_vsz: $(mon.value_cf_serverd_vsz)";
    "Average mon.cf_serverd_vsz: $(mon.av_cf_serverd_vsz)";
    "Standard deviation mon.cf_serverd_vsz: $(mon.dev_cf_serverd_vsz)";

    "Last mon.cf_serverd_rss: $(mon.value_cf_serverd_rss)";
    "Average mon.cf_serverd_rss: $(mon.av_cf_serverd_rss)";
    "Standard deviation mon.cf_serverd_rss: $(mon.dev_cf_serverd_rss)";

    cf_serverd_vsz_threshold_crossed::
      "The measured value $(mon.value_cf_serverd_vsz) is greater than 0";
}
```

Example output generated by running `cf-agent -KI -b report_mon_cfengine_components`:

```
2013-10-28T18:29:20+0000     info: Using command line specified bundlesequence
2013-10-28T18:29:20+0000   notice: R: Last mon.cf_serverd_vsz: 315108.00
2013-10-28T18:29:20+0000   notice: R: Average mon.cf_serverd_vsz: 286748.28
2013-10-28T18:29:20+0000   notice: R: Standard deviation mon.cf_serverd_vsz: 94532.40
2013-10-28T18:29:20+0000   notice: R: The measured value is greater than 0
```

[Back to top of page.][Measuring custom metrics (Enterprise Only)#Overview]

## Ensure measurements are collected and graphed in Mission Portal

By default during collection cf-hub gathers all monitor variables for the policy server, but only select mon vars from remote agents. To ensure that our new metrics for `cf_serverd_vsz` and `cf_serverd_rss` are collected for all agents modify `body report_data_select default_data_select_host` found in `controls/cf-serverd.cf` and add `cf_serverd_vsz`, and `cf_serverd_rss` to the `monitoring_include` attribute. 

Example `body report_data_select default_data_select_host`:

```cf3
body report_data_select default_data_select_host
{
    variables_include => { "sys..*", "mon..*" };
   monitoring_include => { "cpu.*",
                           "mem_total",
                           "mem_free",
                           "mem_cached",
                           "mem_swap",
                           "mem_freeswap",
                           "loadavg",
                           "diskfree",
                           "cf_serverd_vsz",
                           "cf_serverd_rss", };
}
```

Once those changes have propagated to your hosts you will find new user defined measurement graphs for `cf_serverd_vsz` and `cf_serverd_rss`.

Example Graphs: custom_measurement_graphs.jpg

Note: Graphs may not be displayed immediately due to the cf-hub collection schedule. You can force a full collection for the affected clients by running `cf-hub -q full -H <ip of host>` as root from your policy server.


[Back to top of page.][Measuring custom metrics (Enterprise Only)#Overview]
